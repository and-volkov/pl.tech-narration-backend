name: foreign-narrations-backend-app workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.1

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r requirements-dev.txt
    - name: Test with flake8
      run: |
        cd foreign_narrations/
        python -m flake8
  build_and_push_to_docker_hub:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: tests
      steps:
        - name: Check out the repo
          uses: actions/checkout@v2
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
        - name: Login to Docker
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Push to Docker Hub
          uses: docker/build-push-action@v2
          with:
            file: ./foreign_narrations/Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/narrations-app:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd /home/global/planetarium-tech/narrations
            docker-compose stop
            docker-compose rm app
            docker pull ${{ secrets.DOCKER_USERNAME }}/narrations-app:latest
            touch .env
            echo API_HOST=${{ secrets.API_HOST }} >> development.env
            echo API_PORT=${{ secrets.API_PORT }} >> development.env
            echo MONGO_USERNAME=${{ secrets.MONGO_USERNAME }} >> development.env
            echo MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} >> development.env
            echo MONGO_HOST=${{ secrets.MONGO_HOST }} >> development.env
            echo MONGO_PORT=${{ secrets.MONGO_PORT }} >> development.env
            echo MONGO_AUTH_SOURCE=${{ secrets.MONGO_AUTH_SOURCE }} >> development.env
            echo MONGO_AUTH_MECHANISM=${{ secrets.MONGO_AUTH_MECHANISM }} >> development.env
            docker-compose up -d
